#!/bin/bash

# Pre-commit hook for lean CI/CD
# Runs essential checks locally to catch issues before push
# Part of dual-layer CI strategy for cost-effective development

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}❌ Not in a git repository${NC}"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}⚠️  No staged files found${NC}"
    exit 0
fi

echo -e "${BLUE}📁 Staged files: $(echo $STAGED_FILES | wc -w)${NC}"

# Check 1: Code formatting with Prettier
echo -e "${BLUE}🎨 Checking code formatting...${NC}"
if command -v npx &> /dev/null; then
    # Check only staged files for formatting
    JS_TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|jsx|tsx|json|md)$' || true)
    
    if [ -n "$JS_TS_FILES" ]; then
        echo "$JS_TS_FILES" | xargs npx prettier --check 2>/dev/null || {
            echo -e "${RED}❌ Code formatting issues found!${NC}"
            echo -e "${YELLOW}💡 Run 'npm run format' to fix formatting${NC}"
            exit 1
        }
        echo -e "${GREEN}✅ Code formatting looks good${NC}"
    else
        echo -e "${YELLOW}ℹ️  No JS/TS files to format${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  npx not found, skipping formatting check${NC}"
fi

# Check 2: TypeScript compilation
echo -e "${BLUE}🔧 Checking TypeScript compilation...${NC}"
if [ -n "$SKIP_TS_CHECK" ]; then
    echo -e "${YELLOW}⚠️  TypeScript check skipped (SKIP_TS_CHECK set)${NC}"
elif [ -f "tsconfig.ci.json" ] && command -v npx &> /dev/null; then
    npx tsc --project tsconfig.ci.json --noEmit || {
        echo -e "${RED}❌ TypeScript compilation failed!${NC}"
        echo -e "${YELLOW}💡 Use SKIP_TS_CHECK=1 to bypass this check${NC}"
        exit 1
    }
    echo -e "${GREEN}✅ TypeScript compilation successful${NC}"
elif [ -f "tsconfig.json" ] && command -v npx &> /dev/null; then
    npx tsc --noEmit || {
        echo -e "${RED}❌ TypeScript compilation failed!${NC}"
        echo -e "${YELLOW}💡 Use SKIP_TS_CHECK=1 to bypass this check${NC}"
        exit 1
    }
    echo -e "${GREEN}✅ TypeScript compilation successful${NC}"
else
    echo -e "${YELLOW}ℹ️  No TypeScript config found or npx unavailable${NC}"
fi

# Check 3: ESLint (if available)
echo -e "${BLUE}🔍 Running ESLint checks...${NC}"
if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
    if command -v npx &> /dev/null; then
        JS_TS_LINT_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|jsx|tsx)$' || true)
        if [ -n "$JS_TS_LINT_FILES" ]; then
            echo "$JS_TS_LINT_FILES" | xargs npx eslint || {
                echo -e "${RED}❌ ESLint found issues!${NC}"
                exit 1
            }
            echo -e "${GREEN}✅ ESLint checks passed${NC}"
        else
            echo -e "${YELLOW}ℹ️  No JS/TS files to lint${NC}"
        fi
    else
        echo -e "${YELLOW}⚠️  npx not found, skipping ESLint${NC}"
    fi
else
    echo -e "${YELLOW}ℹ️  No ESLint config found${NC}"
fi

# Check 4: Fast unit tests (critical tests only)
echo -e "${BLUE}🧪 Running critical unit tests...${NC}"
if [ -f "package.json" ] && command -v npm &> /dev/null; then
    # Check if test:quick script exists
    if npm run | grep -q "test:quick"; then
        npm run test:quick || {
            echo -e "${RED}❌ Critical tests failed!${NC}"
            exit 1
        }
        echo -e "${GREEN}✅ Critical tests passed${NC}"
    elif npm run | grep -q "test"; then
        # Fallback to regular tests with timeout
        timeout 60 npm test || {
            echo -e "${YELLOW}⚠️  Tests took too long or failed, check manually${NC}"
            echo -e "${YELLOW}💡 Consider adding 'test:quick' script for faster pre-commit checks${NC}"
        }
    else
        echo -e "${YELLOW}ℹ️  No test scripts found${NC}"
    fi
else
    echo -e "${YELLOW}ℹ️  No package.json or npm not available${NC}"
fi

# Check 5: Check for common issues
echo -e "${BLUE}🔍 Checking for common issues...${NC}"

# Check for console.log in TypeScript/JavaScript files
CONSOLE_LOGS=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|jsx|tsx)$' | xargs grep -l "console\.log" 2>/dev/null || true)
if [ -n "$CONSOLE_LOGS" ]; then
    echo -e "${YELLOW}⚠️  Found console.log statements in:${NC}"
    echo "$CONSOLE_LOGS"
    echo -e "${YELLOW}💡 Consider removing or replacing with proper logging${NC}"
fi

# Check for TODO/FIXME comments in staged files
TODO_COMMENTS=$(echo "$STAGED_FILES" | xargs grep -n -E "(TODO|FIXME|XXX)" 2>/dev/null || true)
if [ -n "$TODO_COMMENTS" ]; then
    echo -e "${YELLOW}ℹ️  Found TODO/FIXME comments:${NC}"
    echo "$TODO_COMMENTS" | head -5
fi

# Check for large files (>1MB)
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9, "(" $5 " bytes)"}' || true)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}⚠️  Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}💡 Consider if these should be committed${NC}"
fi

echo -e "${GREEN}🎉 Pre-commit checks completed successfully!${NC}"
echo -e "${BLUE}💡 These local checks save CI minutes and catch issues early${NC}"

exit 0